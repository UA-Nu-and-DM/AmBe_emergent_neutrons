#include "ExN03SteppingAction.hh"

#include "ExN03DetectorConstruction.hh"
#include "ExN03EventAction.hh"
#include "ExN03RunAction.hh"

#include "G4Step.hh"
#include "G4Track.hh"
#include "G4VProcess.hh"
#include "G4TrackVector.hh"

//#include "ExN03.hh"



ExN03SteppingAction::ExN03SteppingAction(ExN03DetectorConstruction* det,
                                         ExN03EventAction* evt)
:detector(det), eventaction(evt)					 
{ }



ExN03SteppingAction::~ExN03SteppingAction()
{ }



void ExN03SteppingAction::UserSteppingAction(const G4Step* aStep)
{
    G4double x[3];
  G4VPhysicalVolume* volume = aStep->GetPreStepPoint()->GetTouchableHandle()->GetVolume();
  G4LogicalVolume *logicalvolume=volume->GetLogicalVolume();
  G4StepPoint *steppoint=aStep->GetPreStepPoint();
  G4Track* track = aStep->GetTrack();
  const G4VProcess* pr = track->GetCreatorProcess();
  
  G4String pN = track->GetDefinition()->GetParticleName();
  G4int pdgid=track->GetDefinition()->GetPDGEncoding();
  G4String prevol;
  prevol=logicalvolume->GetName();
  if(prevol == "world_log" && track->GetNextVolume() == 0){
    particle_name=pN;
    particle_pdg_id=track->GetDefinition()->GetPDGEncoding();
    particle_costheta=track->GetMomentumDirection().z();
    particle_ke=track->GetKineticEnergy()/CLHEP::keV;
    t->Fill();
  }; 
}


